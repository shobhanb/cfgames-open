/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { applyAppreciationAppreciationScoreApplyAffiliateIdYearPost } from '../fn/appreciation-score/apply-appreciation-appreciation-score-apply-affiliate-id-year-post';
import { ApplyAppreciationAppreciationScoreApplyAffiliateIdYearPost$Params } from '../fn/appreciation-score/apply-appreciation-appreciation-score-apply-affiliate-id-year-post';
import { apiAppreciationScoreModel } from '../models/api-appreciation-score-model';
import { getAppreciationScoresAppreciationScoreAffiliateIdYearGet } from '../fn/appreciation-score/get-appreciation-scores-appreciation-score-affiliate-id-year-get';
import { GetAppreciationScoresAppreciationScoreAffiliateIdYearGet$Params } from '../fn/appreciation-score/get-appreciation-scores-appreciation-score-affiliate-id-year-get';
import { updateAppreciationScoresAppreciationScoreAthleteIdOrdinalScorePost } from '../fn/appreciation-score/update-appreciation-scores-appreciation-score-athlete-id-ordinal-score-post';
import { UpdateAppreciationScoresAppreciationScoreAthleteIdOrdinalScorePost$Params } from '../fn/appreciation-score/update-appreciation-scores-appreciation-score-athlete-id-ordinal-score-post';

@Injectable({ providedIn: 'root' })
export class apiAppreciationScoreService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAppreciationScoresAppreciationScoreAffiliateIdYearGet()` */
  static readonly GetAppreciationScoresAppreciationScoreAffiliateIdYearGetPath = '/appreciation_score/{affiliate_id}/{year}/';

  /**
   * Get Appreciation Scores.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAppreciationScoresAppreciationScoreAffiliateIdYearGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAppreciationScoresAppreciationScoreAffiliateIdYearGet$Response(params: GetAppreciationScoresAppreciationScoreAffiliateIdYearGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiAppreciationScoreModel>>> {
    return getAppreciationScoresAppreciationScoreAffiliateIdYearGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Appreciation Scores.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAppreciationScoresAppreciationScoreAffiliateIdYearGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAppreciationScoresAppreciationScoreAffiliateIdYearGet(params: GetAppreciationScoresAppreciationScoreAffiliateIdYearGet$Params, context?: HttpContext): Observable<Array<apiAppreciationScoreModel>> {
    return this.getAppreciationScoresAppreciationScoreAffiliateIdYearGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiAppreciationScoreModel>>): Array<apiAppreciationScoreModel> => r.body)
    );
  }

  /** Path part for operation `updateAppreciationScoresAppreciationScoreAthleteIdOrdinalScorePost()` */
  static readonly UpdateAppreciationScoresAppreciationScoreAthleteIdOrdinalScorePostPath = '/appreciation_score/{athlete_id}/{ordinal}/{score}';

  /**
   * Update Appreciation Scores.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAppreciationScoresAppreciationScoreAthleteIdOrdinalScorePost()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateAppreciationScoresAppreciationScoreAthleteIdOrdinalScorePost$Response(params: UpdateAppreciationScoresAppreciationScoreAthleteIdOrdinalScorePost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return updateAppreciationScoresAppreciationScoreAthleteIdOrdinalScorePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Appreciation Scores.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAppreciationScoresAppreciationScoreAthleteIdOrdinalScorePost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateAppreciationScoresAppreciationScoreAthleteIdOrdinalScorePost(params: UpdateAppreciationScoresAppreciationScoreAthleteIdOrdinalScorePost$Params, context?: HttpContext): Observable<any> {
    return this.updateAppreciationScoresAppreciationScoreAthleteIdOrdinalScorePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `applyAppreciationAppreciationScoreApplyAffiliateIdYearPost()` */
  static readonly ApplyAppreciationAppreciationScoreApplyAffiliateIdYearPostPath = '/appreciation_score/apply/{affiliate_id}/{year}';

  /**
   * Apply Appreciation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `applyAppreciationAppreciationScoreApplyAffiliateIdYearPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  applyAppreciationAppreciationScoreApplyAffiliateIdYearPost$Response(params: ApplyAppreciationAppreciationScoreApplyAffiliateIdYearPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return applyAppreciationAppreciationScoreApplyAffiliateIdYearPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Apply Appreciation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `applyAppreciationAppreciationScoreApplyAffiliateIdYearPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  applyAppreciationAppreciationScoreApplyAffiliateIdYearPost(params: ApplyAppreciationAppreciationScoreApplyAffiliateIdYearPost$Params, context?: HttpContext): Observable<any> {
    return this.applyAppreciationAppreciationScoreApplyAffiliateIdYearPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiAppreciationModel } from '../models/api-appreciation-model';
import { deleteMyAppreciationAppreciationDelete } from '../fn/appreciation/delete-my-appreciation-appreciation-delete';
import { DeleteMyAppreciationAppreciationDelete$Params } from '../fn/appreciation/delete-my-appreciation-appreciation-delete';
import { getAllAppreciationAppreciationAllGet } from '../fn/appreciation/get-all-appreciation-appreciation-all-get';
import { GetAllAppreciationAppreciationAllGet$Params } from '../fn/appreciation/get-all-appreciation-appreciation-all-get';
import { getMyAppreciationAppreciationGet } from '../fn/appreciation/get-my-appreciation-appreciation-get';
import { GetMyAppreciationAppreciationGet$Params } from '../fn/appreciation/get-my-appreciation-appreciation-get';
import { updateMyAppreciationAppreciationPost } from '../fn/appreciation/update-my-appreciation-appreciation-post';
import { UpdateMyAppreciationAppreciationPost$Params } from '../fn/appreciation/update-my-appreciation-appreciation-post';

@Injectable({ providedIn: 'root' })
export class apiAppreciationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getMyAppreciationAppreciationGet()` */
  static readonly GetMyAppreciationAppreciationGetPath = '/appreciation/';

  /**
   * Get My Appreciation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyAppreciationAppreciationGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyAppreciationAppreciationGet$Response(params?: GetMyAppreciationAppreciationGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiAppreciationModel>>> {
    return getMyAppreciationAppreciationGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get My Appreciation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyAppreciationAppreciationGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyAppreciationAppreciationGet(params?: GetMyAppreciationAppreciationGet$Params, context?: HttpContext): Observable<Array<apiAppreciationModel>> {
    return this.getMyAppreciationAppreciationGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiAppreciationModel>>): Array<apiAppreciationModel> => r.body)
    );
  }

  /** Path part for operation `updateMyAppreciationAppreciationPost()` */
  static readonly UpdateMyAppreciationAppreciationPostPath = '/appreciation/';

  /**
   * Update My Appreciation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateMyAppreciationAppreciationPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMyAppreciationAppreciationPost$Response(params: UpdateMyAppreciationAppreciationPost$Params, context?: HttpContext): Observable<StrictHttpResponse<apiAppreciationModel>> {
    return updateMyAppreciationAppreciationPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Update My Appreciation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateMyAppreciationAppreciationPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateMyAppreciationAppreciationPost(params: UpdateMyAppreciationAppreciationPost$Params, context?: HttpContext): Observable<apiAppreciationModel> {
    return this.updateMyAppreciationAppreciationPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiAppreciationModel>): apiAppreciationModel => r.body)
    );
  }

  /** Path part for operation `deleteMyAppreciationAppreciationDelete()` */
  static readonly DeleteMyAppreciationAppreciationDeletePath = '/appreciation/';

  /**
   * Delete My Appreciation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteMyAppreciationAppreciationDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMyAppreciationAppreciationDelete$Response(params: DeleteMyAppreciationAppreciationDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return deleteMyAppreciationAppreciationDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete My Appreciation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteMyAppreciationAppreciationDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteMyAppreciationAppreciationDelete(params: DeleteMyAppreciationAppreciationDelete$Params, context?: HttpContext): Observable<any> {
    return this.deleteMyAppreciationAppreciationDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `getAllAppreciationAppreciationAllGet()` */
  static readonly GetAllAppreciationAppreciationAllGetPath = '/appreciation/all';

  /**
   * Get All Appreciation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllAppreciationAppreciationAllGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAppreciationAppreciationAllGet$Response(params: GetAllAppreciationAppreciationAllGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiAppreciationModel>>> {
    return getAllAppreciationAppreciationAllGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get All Appreciation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllAppreciationAppreciationAllGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAppreciationAppreciationAllGet(params: GetAllAppreciationAppreciationAllGet$Params, context?: HttpContext): Observable<Array<apiAppreciationModel>> {
    return this.getAllAppreciationAppreciationAllGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiAppreciationModel>>): Array<apiAppreciationModel> => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { applyAppreciationAppreciationApplyAffiliateIdYearPost } from '../fn/appreciation/apply-appreciation-appreciation-apply-affiliate-id-year-post';
import { ApplyAppreciationAppreciationApplyAffiliateIdYearPost$Params } from '../fn/appreciation/apply-appreciation-appreciation-apply-affiliate-id-year-post';
import { apiAppreciationModel } from '../models/api-appreciation-model';
import { getAppreciationAppreciationAffiliateIdYearGet } from '../fn/appreciation/get-appreciation-appreciation-affiliate-id-year-get';
import { GetAppreciationAppreciationAffiliateIdYearGet$Params } from '../fn/appreciation/get-appreciation-appreciation-affiliate-id-year-get';
import { updateAppreciationAppreciationAthleteIdOrdinalScorePost } from '../fn/appreciation/update-appreciation-appreciation-athlete-id-ordinal-score-post';
import { UpdateAppreciationAppreciationAthleteIdOrdinalScorePost$Params } from '../fn/appreciation/update-appreciation-appreciation-athlete-id-ordinal-score-post';

@Injectable({ providedIn: 'root' })
export class apiAppreciationService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAppreciationAppreciationAffiliateIdYearGet()` */
  static readonly GetAppreciationAppreciationAffiliateIdYearGetPath = '/appreciation/{affiliate_id}/{year}/';

  /**
   * Get Appreciation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAppreciationAppreciationAffiliateIdYearGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAppreciationAppreciationAffiliateIdYearGet$Response(params: GetAppreciationAppreciationAffiliateIdYearGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiAppreciationModel>>> {
    return getAppreciationAppreciationAffiliateIdYearGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Appreciation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAppreciationAppreciationAffiliateIdYearGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAppreciationAppreciationAffiliateIdYearGet(params: GetAppreciationAppreciationAffiliateIdYearGet$Params, context?: HttpContext): Observable<Array<apiAppreciationModel>> {
    return this.getAppreciationAppreciationAffiliateIdYearGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiAppreciationModel>>): Array<apiAppreciationModel> => r.body)
    );
  }

  /** Path part for operation `updateAppreciationAppreciationAthleteIdOrdinalScorePost()` */
  static readonly UpdateAppreciationAppreciationAthleteIdOrdinalScorePostPath = '/appreciation/{athlete_id}/{ordinal}/{score}';

  /**
   * Update Appreciation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAppreciationAppreciationAthleteIdOrdinalScorePost()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateAppreciationAppreciationAthleteIdOrdinalScorePost$Response(params: UpdateAppreciationAppreciationAthleteIdOrdinalScorePost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return updateAppreciationAppreciationAthleteIdOrdinalScorePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Appreciation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAppreciationAppreciationAthleteIdOrdinalScorePost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateAppreciationAppreciationAthleteIdOrdinalScorePost(params: UpdateAppreciationAppreciationAthleteIdOrdinalScorePost$Params, context?: HttpContext): Observable<any> {
    return this.updateAppreciationAppreciationAthleteIdOrdinalScorePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `applyAppreciationAppreciationApplyAffiliateIdYearPost()` */
  static readonly ApplyAppreciationAppreciationApplyAffiliateIdYearPostPath = '/appreciation/apply/{affiliate_id}/{year}';

  /**
   * Apply Appreciation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `applyAppreciationAppreciationApplyAffiliateIdYearPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  applyAppreciationAppreciationApplyAffiliateIdYearPost$Response(params: ApplyAppreciationAppreciationApplyAffiliateIdYearPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return applyAppreciationAppreciationApplyAffiliateIdYearPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Apply Appreciation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `applyAppreciationAppreciationApplyAffiliateIdYearPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  applyAppreciationAppreciationApplyAffiliateIdYearPost(params: ApplyAppreciationAppreciationApplyAffiliateIdYearPost$Params, context?: HttpContext): Observable<any> {
    return this.applyAppreciationAppreciationApplyAffiliateIdYearPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}

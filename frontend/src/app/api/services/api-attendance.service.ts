/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { applyAttendanceAttendanceApplyAffiliateIdYearPost } from '../fn/attendance/apply-attendance-attendance-apply-affiliate-id-year-post';
import { ApplyAttendanceAttendanceApplyAffiliateIdYearPost$Params } from '../fn/attendance/apply-attendance-attendance-apply-affiliate-id-year-post';
import { apiAttendanceModel } from '../models/api-attendance-model';
import { getAppreciationAttendanceAffiliateIdYearOrdinalGet } from '../fn/attendance/get-appreciation-attendance-affiliate-id-year-ordinal-get';
import { GetAppreciationAttendanceAffiliateIdYearOrdinalGet$Params } from '../fn/attendance/get-appreciation-attendance-affiliate-id-year-ordinal-get';
import { updateAttendanceAttendanceAffiliateIdYearPost } from '../fn/attendance/update-attendance-attendance-affiliate-id-year-post';
import { UpdateAttendanceAttendanceAffiliateIdYearPost$Params } from '../fn/attendance/update-attendance-attendance-affiliate-id-year-post';

@Injectable({ providedIn: 'root' })
export class apiAttendanceService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getAppreciationAttendanceAffiliateIdYearOrdinalGet()` */
  static readonly GetAppreciationAttendanceAffiliateIdYearOrdinalGetPath = '/attendance/{affiliate_id}/{year}/{ordinal}/';

  /**
   * Get Appreciation.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAppreciationAttendanceAffiliateIdYearOrdinalGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAppreciationAttendanceAffiliateIdYearOrdinalGet$Response(params: GetAppreciationAttendanceAffiliateIdYearOrdinalGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiAttendanceModel>>> {
    return getAppreciationAttendanceAffiliateIdYearOrdinalGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Appreciation.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAppreciationAttendanceAffiliateIdYearOrdinalGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAppreciationAttendanceAffiliateIdYearOrdinalGet(params: GetAppreciationAttendanceAffiliateIdYearOrdinalGet$Params, context?: HttpContext): Observable<Array<apiAttendanceModel>> {
    return this.getAppreciationAttendanceAffiliateIdYearOrdinalGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiAttendanceModel>>): Array<apiAttendanceModel> => r.body)
    );
  }

  /** Path part for operation `updateAttendanceAttendanceAffiliateIdYearPost()` */
  static readonly UpdateAttendanceAttendanceAffiliateIdYearPostPath = '/attendance/{affiliate_id}/{year}/';

  /**
   * Update Attendance.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateAttendanceAttendanceAffiliateIdYearPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateAttendanceAttendanceAffiliateIdYearPost$Response(params: UpdateAttendanceAttendanceAffiliateIdYearPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return updateAttendanceAttendanceAffiliateIdYearPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Attendance.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateAttendanceAttendanceAffiliateIdYearPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateAttendanceAttendanceAffiliateIdYearPost(params: UpdateAttendanceAttendanceAffiliateIdYearPost$Params, context?: HttpContext): Observable<any> {
    return this.updateAttendanceAttendanceAffiliateIdYearPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `applyAttendanceAttendanceApplyAffiliateIdYearPost()` */
  static readonly ApplyAttendanceAttendanceApplyAffiliateIdYearPostPath = '/attendance/apply/{affiliate_id}/{year}';

  /**
   * Apply Attendance.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `applyAttendanceAttendanceApplyAffiliateIdYearPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  applyAttendanceAttendanceApplyAffiliateIdYearPost$Response(params: ApplyAttendanceAttendanceApplyAffiliateIdYearPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return applyAttendanceAttendanceApplyAffiliateIdYearPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Apply Attendance.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `applyAttendanceAttendanceApplyAffiliateIdYearPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  applyAttendanceAttendanceApplyAffiliateIdYearPost(params: ApplyAttendanceAttendanceApplyAffiliateIdYearPost$Params, context?: HttpContext): Observable<any> {
    return this.applyAttendanceAttendanceApplyAffiliateIdYearPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}

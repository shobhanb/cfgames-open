/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addOpenAppreciationStatusAppreciationStatusPut } from '../fn/appreciation-status/add-open-appreciation-status-appreciation-status-put';
import { AddOpenAppreciationStatusAppreciationStatusPut$Params } from '../fn/appreciation-status/add-open-appreciation-status-appreciation-status-put';
import { apiAppreciationStatusModel } from '../models/api-appreciation-status-model';
import { deleteOpenAppreciationStatusAppreciationStatusDelete } from '../fn/appreciation-status/delete-open-appreciation-status-appreciation-status-delete';
import { DeleteOpenAppreciationStatusAppreciationStatusDelete$Params } from '../fn/appreciation-status/delete-open-appreciation-status-appreciation-status-delete';
import { getOpenAppreciationStatusAppreciationStatusGet } from '../fn/appreciation-status/get-open-appreciation-status-appreciation-status-get';
import { GetOpenAppreciationStatusAppreciationStatusGet$Params } from '../fn/appreciation-status/get-open-appreciation-status-appreciation-status-get';

@Injectable({ providedIn: 'root' })
export class apiAppreciationStatusService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getOpenAppreciationStatusAppreciationStatusGet()` */
  static readonly GetOpenAppreciationStatusAppreciationStatusGetPath = '/appreciation_status/';

  /**
   * Get Open Appreciation Status.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getOpenAppreciationStatusAppreciationStatusGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOpenAppreciationStatusAppreciationStatusGet$Response(params: GetOpenAppreciationStatusAppreciationStatusGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiAppreciationStatusModel>>> {
    return getOpenAppreciationStatusAppreciationStatusGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Open Appreciation Status.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getOpenAppreciationStatusAppreciationStatusGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getOpenAppreciationStatusAppreciationStatusGet(params: GetOpenAppreciationStatusAppreciationStatusGet$Params, context?: HttpContext): Observable<Array<apiAppreciationStatusModel>> {
    return this.getOpenAppreciationStatusAppreciationStatusGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiAppreciationStatusModel>>): Array<apiAppreciationStatusModel> => r.body)
    );
  }

  /** Path part for operation `addOpenAppreciationStatusAppreciationStatusPut()` */
  static readonly AddOpenAppreciationStatusAppreciationStatusPutPath = '/appreciation_status/';

  /**
   * Add Open Appreciation Status.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addOpenAppreciationStatusAppreciationStatusPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOpenAppreciationStatusAppreciationStatusPut$Response(params: AddOpenAppreciationStatusAppreciationStatusPut$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return addOpenAppreciationStatusAppreciationStatusPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Add Open Appreciation Status.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addOpenAppreciationStatusAppreciationStatusPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addOpenAppreciationStatusAppreciationStatusPut(params: AddOpenAppreciationStatusAppreciationStatusPut$Params, context?: HttpContext): Observable<any> {
    return this.addOpenAppreciationStatusAppreciationStatusPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `deleteOpenAppreciationStatusAppreciationStatusDelete()` */
  static readonly DeleteOpenAppreciationStatusAppreciationStatusDeletePath = '/appreciation_status/';

  /**
   * Delete Open Appreciation Status.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteOpenAppreciationStatusAppreciationStatusDelete()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deleteOpenAppreciationStatusAppreciationStatusDelete$Response(params: DeleteOpenAppreciationStatusAppreciationStatusDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return deleteOpenAppreciationStatusAppreciationStatusDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Open Appreciation Status.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteOpenAppreciationStatusAppreciationStatusDelete$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  deleteOpenAppreciationStatusAppreciationStatusDelete(params: DeleteOpenAppreciationStatusAppreciationStatusDelete$Params, context?: HttpContext): Observable<any> {
    return this.deleteOpenAppreciationStatusAppreciationStatusDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}

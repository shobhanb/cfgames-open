/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addUpdateCfeventsCfeventsInitializePost } from '../fn/cfevents/add-update-cfevents-cfevents-initialize-post';
import { AddUpdateCfeventsCfeventsInitializePost$Params } from '../fn/cfevents/add-update-cfevents-cfevents-initialize-post';
import { apiEventsModel } from '../models/api-events-model';
import { getCfeventsCfeventsGet } from '../fn/cfevents/get-cfevents-cfevents-get';
import { GetCfeventsCfeventsGet$Params } from '../fn/cfevents/get-cfevents-cfevents-get';

@Injectable({ providedIn: 'root' })
export class apiCfeventsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getCfeventsCfeventsGet()` */
  static readonly GetCfeventsCfeventsGetPath = '/cfevents/';

  /**
   * Get Cfevents.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCfeventsCfeventsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCfeventsCfeventsGet$Response(params?: GetCfeventsCfeventsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiEventsModel>>> {
    return getCfeventsCfeventsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Cfevents.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCfeventsCfeventsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCfeventsCfeventsGet(params?: GetCfeventsCfeventsGet$Params, context?: HttpContext): Observable<Array<apiEventsModel>> {
    return this.getCfeventsCfeventsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiEventsModel>>): Array<apiEventsModel> => r.body)
    );
  }

  /** Path part for operation `addUpdateCfeventsCfeventsInitializePost()` */
  static readonly AddUpdateCfeventsCfeventsInitializePostPath = '/cfevents/initialize';

  /**
   * Add Update Cfevents.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addUpdateCfeventsCfeventsInitializePost()` instead.
   *
   * This method doesn't expect any request body.
   */
  addUpdateCfeventsCfeventsInitializePost$Response(params?: AddUpdateCfeventsCfeventsInitializePost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return addUpdateCfeventsCfeventsInitializePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Add Update Cfevents.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addUpdateCfeventsCfeventsInitializePost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addUpdateCfeventsCfeventsInitializePost(params?: AddUpdateCfeventsCfeventsInitializePost$Params, context?: HttpContext): Observable<any> {
    return this.addUpdateCfeventsCfeventsInitializePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}

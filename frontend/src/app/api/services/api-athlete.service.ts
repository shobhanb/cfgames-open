/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiAffiliateAthlete } from '../models/api-affiliate-athlete';
import { assignAthleteToTeamAthleteTeamAssignPut } from '../fn/athlete/assign-athlete-to-team-athlete-team-assign-put';
import { AssignAthleteToTeamAthleteTeamAssignPut$Params } from '../fn/athlete/assign-athlete-to-team-athlete-team-assign-put';
import { apiAthleteDetail } from '../models/api-athlete-detail';
import { apiAutoTeamAssignment } from '../models/api-auto-team-assignment';
import { getAthleteDetailAllAthleteDetailAllGet } from '../fn/athlete/get-athlete-detail-all-athlete-detail-all-get';
import { GetAthleteDetailAllAthleteDetailAllGet$Params } from '../fn/athlete/get-athlete-detail-all-athlete-detail-all-get';
import { getAthleteDetailAthleteDetailGet } from '../fn/athlete/get-athlete-detail-athlete-detail-get';
import { GetAthleteDetailAthleteDetailGet$Params } from '../fn/athlete/get-athlete-detail-athlete-detail-get';
import { getAthleteListAthleteListGet } from '../fn/athlete/get-athlete-list-athlete-list-get';
import { GetAthleteListAthleteListGet$Params } from '../fn/athlete/get-athlete-list-athlete-list-get';
import { getMyAthleteDataAthleteMeGet } from '../fn/athlete/get-my-athlete-data-athlete-me-get';
import { GetMyAthleteDataAthleteMeGet$Params } from '../fn/athlete/get-my-athlete-data-athlete-me-get';
import { getTeamNamesAthleteTeamNamesGet } from '../fn/athlete/get-team-names-athlete-team-names-get';
import { GetTeamNamesAthleteTeamNamesGet$Params } from '../fn/athlete/get-team-names-athlete-team-names-get';
import { randomAssignAthletesAthleteTeamRandomAssignGet } from '../fn/athlete/random-assign-athletes-athlete-team-random-assign-get';
import { RandomAssignAthletesAthleteTeamRandomAssignGet$Params } from '../fn/athlete/random-assign-athletes-athlete-team-random-assign-get';
import { renameTeamsAthleteRenameTeamsPut } from '../fn/athlete/rename-teams-athlete-rename-teams-put';
import { RenameTeamsAthleteRenameTeamsPut$Params } from '../fn/athlete/rename-teams-athlete-rename-teams-put';
import { apiTeamName } from '../models/api-team-name';

@Injectable({ providedIn: 'root' })
export class apiAthleteService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getMyAthleteDataAthleteMeGet()` */
  static readonly GetMyAthleteDataAthleteMeGetPath = '/athlete/me';

  /**
   * Get My Athlete Data.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyAthleteDataAthleteMeGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyAthleteDataAthleteMeGet$Response(params?: GetMyAthleteDataAthleteMeGet$Params, context?: HttpContext): Observable<StrictHttpResponse<apiAthleteDetail>> {
    return getMyAthleteDataAthleteMeGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get My Athlete Data.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyAthleteDataAthleteMeGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyAthleteDataAthleteMeGet(params?: GetMyAthleteDataAthleteMeGet$Params, context?: HttpContext): Observable<apiAthleteDetail> {
    return this.getMyAthleteDataAthleteMeGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiAthleteDetail>): apiAthleteDetail => r.body)
    );
  }

  /** Path part for operation `getAthleteListAthleteListGet()` */
  static readonly GetAthleteListAthleteListGetPath = '/athlete/list';

  /**
   * Get Athlete List.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAthleteListAthleteListGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAthleteListAthleteListGet$Response(params?: GetAthleteListAthleteListGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiAffiliateAthlete>>> {
    return getAthleteListAthleteListGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Athlete List.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAthleteListAthleteListGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAthleteListAthleteListGet(params?: GetAthleteListAthleteListGet$Params, context?: HttpContext): Observable<Array<apiAffiliateAthlete>> {
    return this.getAthleteListAthleteListGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiAffiliateAthlete>>): Array<apiAffiliateAthlete> => r.body)
    );
  }

  /** Path part for operation `getAthleteDetailAllAthleteDetailAllGet()` */
  static readonly GetAthleteDetailAllAthleteDetailAllGetPath = '/athlete/detail/all';

  /**
   * Get Athlete Detail All.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAthleteDetailAllAthleteDetailAllGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAthleteDetailAllAthleteDetailAllGet$Response(params: GetAthleteDetailAllAthleteDetailAllGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiAthleteDetail>>> {
    return getAthleteDetailAllAthleteDetailAllGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Athlete Detail All.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAthleteDetailAllAthleteDetailAllGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAthleteDetailAllAthleteDetailAllGet(params: GetAthleteDetailAllAthleteDetailAllGet$Params, context?: HttpContext): Observable<Array<apiAthleteDetail>> {
    return this.getAthleteDetailAllAthleteDetailAllGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiAthleteDetail>>): Array<apiAthleteDetail> => r.body)
    );
  }

  /** Path part for operation `getAthleteDetailAthleteDetailGet()` */
  static readonly GetAthleteDetailAthleteDetailGetPath = '/athlete/detail';

  /**
   * Get Athlete Detail.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAthleteDetailAthleteDetailGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAthleteDetailAthleteDetailGet$Response(params: GetAthleteDetailAthleteDetailGet$Params, context?: HttpContext): Observable<StrictHttpResponse<apiAthleteDetail>> {
    return getAthleteDetailAthleteDetailGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Athlete Detail.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAthleteDetailAthleteDetailGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAthleteDetailAthleteDetailGet(params: GetAthleteDetailAthleteDetailGet$Params, context?: HttpContext): Observable<apiAthleteDetail> {
    return this.getAthleteDetailAthleteDetailGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiAthleteDetail>): apiAthleteDetail => r.body)
    );
  }

  /** Path part for operation `assignAthleteToTeamAthleteTeamAssignPut()` */
  static readonly AssignAthleteToTeamAthleteTeamAssignPutPath = '/athlete/team/assign';

  /**
   * Assign Athlete To Team.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignAthleteToTeamAthleteTeamAssignPut()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignAthleteToTeamAthleteTeamAssignPut$Response(params: AssignAthleteToTeamAthleteTeamAssignPut$Params, context?: HttpContext): Observable<StrictHttpResponse<apiAthleteDetail>> {
    return assignAthleteToTeamAthleteTeamAssignPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Assign Athlete To Team.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignAthleteToTeamAthleteTeamAssignPut$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignAthleteToTeamAthleteTeamAssignPut(params: AssignAthleteToTeamAthleteTeamAssignPut$Params, context?: HttpContext): Observable<apiAthleteDetail> {
    return this.assignAthleteToTeamAthleteTeamAssignPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiAthleteDetail>): apiAthleteDetail => r.body)
    );
  }

  /** Path part for operation `randomAssignAthletesAthleteTeamRandomAssignGet()` */
  static readonly RandomAssignAthletesAthleteTeamRandomAssignGetPath = '/athlete/team/random_assign';

  /**
   * Random Assign Athletes.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `randomAssignAthletesAthleteTeamRandomAssignGet()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  randomAssignAthletesAthleteTeamRandomAssignGet$Response(params: RandomAssignAthletesAthleteTeamRandomAssignGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiAutoTeamAssignment>>> {
    return randomAssignAthletesAthleteTeamRandomAssignGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Random Assign Athletes.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `randomAssignAthletesAthleteTeamRandomAssignGet$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  randomAssignAthletesAthleteTeamRandomAssignGet(params: RandomAssignAthletesAthleteTeamRandomAssignGet$Params, context?: HttpContext): Observable<Array<apiAutoTeamAssignment>> {
    return this.randomAssignAthletesAthleteTeamRandomAssignGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiAutoTeamAssignment>>): Array<apiAutoTeamAssignment> => r.body)
    );
  }

  /** Path part for operation `getTeamNamesAthleteTeamNamesGet()` */
  static readonly GetTeamNamesAthleteTeamNamesGetPath = '/athlete/team_names';

  /**
   * Get Team Names.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTeamNamesAthleteTeamNamesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamNamesAthleteTeamNamesGet$Response(params: GetTeamNamesAthleteTeamNamesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiTeamName>>> {
    return getTeamNamesAthleteTeamNamesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Team Names.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTeamNamesAthleteTeamNamesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamNamesAthleteTeamNamesGet(params: GetTeamNamesAthleteTeamNamesGet$Params, context?: HttpContext): Observable<Array<apiTeamName>> {
    return this.getTeamNamesAthleteTeamNamesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiTeamName>>): Array<apiTeamName> => r.body)
    );
  }

  /** Path part for operation `renameTeamsAthleteRenameTeamsPut()` */
  static readonly RenameTeamsAthleteRenameTeamsPutPath = '/athlete/rename_teams';

  /**
   * Rename Teams.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `renameTeamsAthleteRenameTeamsPut()` instead.
   *
   * This method doesn't expect any request body.
   */
  renameTeamsAthleteRenameTeamsPut$Response(params: RenameTeamsAthleteRenameTeamsPut$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiTeamName>>> {
    return renameTeamsAthleteRenameTeamsPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Rename Teams.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `renameTeamsAthleteRenameTeamsPut$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  renameTeamsAthleteRenameTeamsPut(params: RenameTeamsAthleteRenameTeamsPut$Params, context?: HttpContext): Observable<Array<apiTeamName>> {
    return this.renameTeamsAthleteRenameTeamsPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiTeamName>>): Array<apiTeamName> => r.body)
    );
  }

}

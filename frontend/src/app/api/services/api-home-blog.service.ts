/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addHomeBlogHomeBlogPost } from '../fn/home-blog/add-home-blog-home-blog-post';
import { AddHomeBlogHomeBlogPost$Params } from '../fn/home-blog/add-home-blog-home-blog-post';
import { deleteHomeBlogHomeBlogDelete } from '../fn/home-blog/delete-home-blog-home-blog-delete';
import { DeleteHomeBlogHomeBlogDelete$Params } from '../fn/home-blog/delete-home-blog-home-blog-delete';
import { getHomeBlogHomeBlogGet } from '../fn/home-blog/get-home-blog-home-blog-get';
import { GetHomeBlogHomeBlogGet$Params } from '../fn/home-blog/get-home-blog-home-blog-get';
import { apiHomeBlogModel } from '../models/api-home-blog-model';
import { updateHomeBlogHomeBlogPatch } from '../fn/home-blog/update-home-blog-home-blog-patch';
import { UpdateHomeBlogHomeBlogPatch$Params } from '../fn/home-blog/update-home-blog-home-blog-patch';

@Injectable({ providedIn: 'root' })
export class apiHomeBlogService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getHomeBlogHomeBlogGet()` */
  static readonly GetHomeBlogHomeBlogGetPath = '/home_blog/';

  /**
   * Get Home Blog.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHomeBlogHomeBlogGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHomeBlogHomeBlogGet$Response(params: GetHomeBlogHomeBlogGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiHomeBlogModel>>> {
    return getHomeBlogHomeBlogGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Home Blog.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHomeBlogHomeBlogGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHomeBlogHomeBlogGet(params: GetHomeBlogHomeBlogGet$Params, context?: HttpContext): Observable<Array<apiHomeBlogModel>> {
    return this.getHomeBlogHomeBlogGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiHomeBlogModel>>): Array<apiHomeBlogModel> => r.body)
    );
  }

  /** Path part for operation `addHomeBlogHomeBlogPost()` */
  static readonly AddHomeBlogHomeBlogPostPath = '/home_blog/';

  /**
   * Add Home Blog.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addHomeBlogHomeBlogPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addHomeBlogHomeBlogPost$Response(params: AddHomeBlogHomeBlogPost$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return addHomeBlogHomeBlogPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Add Home Blog.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addHomeBlogHomeBlogPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addHomeBlogHomeBlogPost(params: AddHomeBlogHomeBlogPost$Params, context?: HttpContext): Observable<any> {
    return this.addHomeBlogHomeBlogPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `deleteHomeBlogHomeBlogDelete()` */
  static readonly DeleteHomeBlogHomeBlogDeletePath = '/home_blog/';

  /**
   * Delete Home Blog.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteHomeBlogHomeBlogDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteHomeBlogHomeBlogDelete$Response(params: DeleteHomeBlogHomeBlogDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return deleteHomeBlogHomeBlogDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete Home Blog.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteHomeBlogHomeBlogDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteHomeBlogHomeBlogDelete(params: DeleteHomeBlogHomeBlogDelete$Params, context?: HttpContext): Observable<any> {
    return this.deleteHomeBlogHomeBlogDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `updateHomeBlogHomeBlogPatch()` */
  static readonly UpdateHomeBlogHomeBlogPatchPath = '/home_blog/';

  /**
   * Update Home Blog.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateHomeBlogHomeBlogPatch()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateHomeBlogHomeBlogPatch$Response(params: UpdateHomeBlogHomeBlogPatch$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return updateHomeBlogHomeBlogPatch(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Home Blog.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateHomeBlogHomeBlogPatch$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateHomeBlogHomeBlogPatch(params: UpdateHomeBlogHomeBlogPatch$Params, context?: HttpContext): Observable<any> {
    return this.updateHomeBlogHomeBlogPatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

}

/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getTeamsTeamsAffiliateIdYearGet } from '../fn/teams/get-teams-teams-affiliate-id-year-get';
import { GetTeamsTeamsAffiliateIdYearGet$Params } from '../fn/teams/get-teams-teams-affiliate-id-year-get';
import { renameTeamTeamsRenameAffiliateIdYearTeamNameNewTeamNamePost } from '../fn/teams/rename-team-teams-rename-affiliate-id-year-team-name-new-team-name-post';
import { RenameTeamTeamsRenameAffiliateIdYearTeamNameNewTeamNamePost$Params } from '../fn/teams/rename-team-teams-rename-affiliate-id-year-team-name-new-team-name-post';
import { apiTeamsModel } from '../models/api-teams-model';
import { updateTeamInfoTeamsUpdateAffiliateIdYearPost } from '../fn/teams/update-team-info-teams-update-affiliate-id-year-post';
import { UpdateTeamInfoTeamsUpdateAffiliateIdYearPost$Params } from '../fn/teams/update-team-info-teams-update-affiliate-id-year-post';

@Injectable({ providedIn: 'root' })
export class apiTeamsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTeamsTeamsAffiliateIdYearGet()` */
  static readonly GetTeamsTeamsAffiliateIdYearGetPath = '/teams/{affiliate_id}/{year}/';

  /**
   * Get Teams.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTeamsTeamsAffiliateIdYearGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamsTeamsAffiliateIdYearGet$Response(params: GetTeamsTeamsAffiliateIdYearGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<apiTeamsModel>>> {
    return getTeamsTeamsAffiliateIdYearGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get Teams.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTeamsTeamsAffiliateIdYearGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTeamsTeamsAffiliateIdYearGet(params: GetTeamsTeamsAffiliateIdYearGet$Params, context?: HttpContext): Observable<Array<apiTeamsModel>> {
    return this.getTeamsTeamsAffiliateIdYearGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<apiTeamsModel>>): Array<apiTeamsModel> => r.body)
    );
  }

  /** Path part for operation `updateTeamInfoTeamsUpdateAffiliateIdYearPost()` */
  static readonly UpdateTeamInfoTeamsUpdateAffiliateIdYearPostPath = '/teams/update/{affiliate_id}/{year}/';

  /**
   * Update Team Info.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTeamInfoTeamsUpdateAffiliateIdYearPost()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateTeamInfoTeamsUpdateAffiliateIdYearPost$Response(params: UpdateTeamInfoTeamsUpdateAffiliateIdYearPost$Params, context?: HttpContext): Observable<StrictHttpResponse<apiTeamsModel>> {
    return updateTeamInfoTeamsUpdateAffiliateIdYearPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Update Team Info.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTeamInfoTeamsUpdateAffiliateIdYearPost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateTeamInfoTeamsUpdateAffiliateIdYearPost(params: UpdateTeamInfoTeamsUpdateAffiliateIdYearPost$Params, context?: HttpContext): Observable<apiTeamsModel> {
    return this.updateTeamInfoTeamsUpdateAffiliateIdYearPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiTeamsModel>): apiTeamsModel => r.body)
    );
  }

  /** Path part for operation `renameTeamTeamsRenameAffiliateIdYearTeamNameNewTeamNamePost()` */
  static readonly RenameTeamTeamsRenameAffiliateIdYearTeamNameNewTeamNamePostPath = '/teams/rename/{affiliate_id}/{year}/{team_name}/{new_team_name}';

  /**
   * Rename Team.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `renameTeamTeamsRenameAffiliateIdYearTeamNameNewTeamNamePost()` instead.
   *
   * This method doesn't expect any request body.
   */
  renameTeamTeamsRenameAffiliateIdYearTeamNameNewTeamNamePost$Response(params: RenameTeamTeamsRenameAffiliateIdYearTeamNameNewTeamNamePost$Params, context?: HttpContext): Observable<StrictHttpResponse<apiTeamsModel>> {
    return renameTeamTeamsRenameAffiliateIdYearTeamNameNewTeamNamePost(this.http, this.rootUrl, params, context);
  }

  /**
   * Rename Team.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `renameTeamTeamsRenameAffiliateIdYearTeamNameNewTeamNamePost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  renameTeamTeamsRenameAffiliateIdYearTeamNameNewTeamNamePost(params: RenameTeamTeamsRenameAffiliateIdYearTeamNameNewTeamNamePost$Params, context?: HttpContext): Observable<apiTeamsModel> {
    return this.renameTeamTeamsRenameAffiliateIdYearTeamNameNewTeamNamePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<apiTeamsModel>): apiTeamsModel => r.body)
    );
  }

}
